# terraform apply yaml template

parameters:

- name: preTerraformSetup
  type: object
  default: []

- name: workingDirectory
  type: string
  # e.g. '$(System.ArtifactsDirectory)/CommonServicesTF'

- name: environmentServiceName
  type: string
  # e.g. 'Sandbox Connection'
  
- name: tfversion
  type: string
  # e.g. '0.14.4'

steps:

  - ${{ parameters.preTerraformSetup }}

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
    displayName: 'Use Terraform ${{ parameters.tfversion }}'
    inputs:
      terraformVersion: '${{ parameters.tfversion }}'

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform init'
    inputs:
      command: init
      workingDirectory: '${{ parameters.workingDirectory }}'

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform validate'
    inputs:
      workingDirectory: '${{ parameters.workingDirectory }}'

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform plan'
    inputs:
      command: plan
      workingDirectory: '${{ parameters.workingDirectory }}'
      environmentServiceName: '${{ parameters.environmentServiceName }}'
      allowTelemetryCollection: false

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform apply'
    inputs:
      command: apply
      workingDirectory: '${{ parameters.workingDirectory }}'
      environmentServiceName: '${{ parameters.environmentServiceName }}'
      allowTelemetryCollection: false
    timeoutInMinutes: 60